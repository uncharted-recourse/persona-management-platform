const path = require('path');
const fs = require('fs');
const winston = require('winston');
const morgan = require('morgan');

const loggingDir = path.resolve('./logs');
const errorLogsPath = path.resolve(loggingDir, './error.log');
const allLogsPath = path.resolve(loggingDir, './all-logs.log');

// Create logging dir if not exists
if (!fs.existsSync(loggingDir)) {
  fs.mkdirSync(loggingDir);
}

const env = process.env.NODE_ENV || 'developement';

const consoleLoggerLevels = {
  development: 'silly',
  production: 'info',
};

const consoleLoggerLevel = process.env.CONSOLE_LOGGER_LEVEL
  || consoleLoggerLevels[env]
  || consoleLoggerLevels.development;

const fileLoggerLevels = {
  development: 'debug',
  production: 'info',
};

const fileLoggerLevel = process.env.FILE_LOGGER_LEVEL
  || fileLoggerLevels[env]
  || fileLoggerLevels.development;

// Winston Logger
const logger = winston.createLogger({
  format: winston.format.json(),
  transports: [
    //
    // - Write to all logs with level `info` and below to `combined.log`
    // - Write all logs error (and below) to `error.log`.
    //
    new winston.transports.File({
      filename: errorLogsPath,
      level: 'error',
      handleExceptions: true,
      json: true,
      maxsize: 5242880, // 5MB
      maxFiles: 5,
      colorize: true,
    }),
    new winston.transports.File({
      level: fileLoggerLevel,
      filename: allLogsPath,
      json: true,
      maxsize: 5242880, // 5MB
      maxFiles: 5,
      colorize: true,
    }),
  ],
});

// Config for writting before exit on fatal unhandeld exeptions
logger.exitOnError = false;

//
// If we're not in production then log to the `console` with the format:
// `${info.level}: ${info.message} JSON.stringify({ ...rest }) `
//
if (consoleLoggerLevel !== 'none') {
  logger.add(new winston.transports.Console({
    level: consoleLoggerLevel,
    format: winston.format.simple(),
    json: true,
    handleExceptions: true,
  }));
}

// Log message stack and error for unhanded Error exepections
process.on('uncaughtException', (error) => {
  if (error.message && error.stack) {
    const { message, stack } = error;
    logger.error('Uncaught Exception:', { message, stack });
  } else {
    logger.error('Uncaught Exception:', { error });
  }
});

// define stream method for morgan.
logger.stream = {
  write(message) {
    // Morgan messages have a trailing '\n'
    logger.info(message.trim());
  },
};

// stream Morgan logger output to winston
const loggingMiddleware = morgan('dev', { stream: logger.stream });

module.exports = {
  logger,
  loggingMiddleware,
};
